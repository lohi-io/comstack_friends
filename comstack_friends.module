<?php

/**
 * @file
 * comstack_friends.module
 */

/**
 * Implements hook_permission().
 */
function comstack_friends_permission() {
  return array(
    'access other users comstack_friends' => array(
      'title' => t('Access other users friends lists'),
      'description' => t('Allows users to view other users friends lists.'),
    ),
    'access other users comstack_pending' => array(
      'title' => t('Access other users pending lists'),
      'description' => t('Allows users to view other users pending friend requests lists.'),
    ),
    'access other users comstack_blocked' => array(
      'title' => t('Access other users blocked lists'),
      'description' => t('Allows users to view other users blocked lists.'),
    ),
  );
}

/**
 * Implements hook_user_preferences().
 */
function comstack_friends_user_preferences() {
  return array(
    'comstack_friends_allow_requests' => array(
      'title' => t('Comstack Friends - Allow friend requests'),
      'default_value' => 1,
      'form_ids' => array('user_profile_form'),
      // The form_item will pass whatever on to the form specified in the
      // previous index.
      'form_item' => array(
        '#title' => t('Allow other users to send me friend requests?'),
        '#type' => 'checkbox',
        '#weight' => 1,
      ),
      // The views handler information to pass to hook_views_data().
      'views_handlers' => array(
        // Following index can be named anything sensible.
        'comstack_friends_allow_requests' => array(
          'title' => t('Comstack Friends - Allow friend requests'),
          'help' => t('Access the preference information for whether or not the user in this row allows other users to request their friendship.'),
          // Preference name must match the preference name (duh) and be a
          // valid machine name string.
          'filter' => array(
            'handler' => 'user_preferences_handler_filter_boolean',
            'preference_name' => 'comstack_friends_allow_requests',
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function comstack_friends_views_api() {
  return array(
    'api' => '3.0',
  );
}

/**
 * Implements hook_user_relationships_save().
 *
 * When a user blocks another user if they are friends dissolve that
 * friendship. Harsh.
 */
function comstack_friends_user_relationships_save($relationship, $action) {
  $dissolve = variable_get('comstack_friends_dissolve_on_block', TRUE);

  if (!empty($relationship->type) && $relationship->type->machine_name === 'comstack_blocked' && $action === 'request' && $dissolve) {
    // Try and find a friendship between these two users.
    $relationships = user_relationships_load(array('between' => array($relationship->requester->uid, $relationship->requestee->uid)));

    if ($relationships) {
      // Iterate through the found relationships until we find friendship.
      foreach ($relationships as $rid => $_relationship) {
        if ($_relationship->machine_name === 'comstack_friends') {
          // Delete it and bust out.
          user_relationships_delete_relationship($_relationship, $relationship->requester);
          break;
        }
      }
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function comstack_friends_query_comstack_recipients_alter(QueryAlterableInterface $query) {
  // If we want to restrict comstack available recipients by existing
  // friendships then alter the query!
  if (variable_get('comstack_friends_restrict_entity_ref_to_friends', TRUE)) {
    global $user;

    // Load the friendship type, we'll want the rtid from it for the join.
    $friend_type = user_relationships_type_machine_name_load('comstack_friends');

    // Add the join which will require that a friendship relationship exists.
    $ur_alias = $query->join('user_relationships', 'ur', 'users.uid = ur.requester_id');
    $query->condition("$ur_alias.rtid", $friend_type->rtid)
      ->condition("$ur_alias.requestee_id", $user->uid)
      ->condition("$ur_alias.approved", 1);

    // Add in username sort for good measure.
    $query->orderBy('name');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function comstack_friends_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  // Only alter the exposed filter form for the search view.
  if ($form['#id'] === 'views-exposed-form-comstack-friends-search-page') {
    // Add a class to the form.
    if (empty($form['#attributes']['class'])) {
      $form['#attributes']['class'] = array();
    }
    $form['#attributes']['class'][] = 'form-horizontal';

    // Add a placeholder attribute.
    $form['name']['#placeholder'] = t('Find new and existing friends by entering their username...');
    $form['name']['#attributes']['placeholder'] = $form['name']['#placeholder'];
  }
}

/**
 * View access plugin callback.
 */
function comstack_friends_views_check_perm($bypass_perm, $perm, $account = NULL) {
  global $user;

  if (!$account) {
    $account = $user;
  }

  // Check the permission first.
  if (user_access($bypass_perm, $account)) {
    return TRUE;
  }

  // Grab the user ID from the URL.
  if ((arg(0) === 'user' || arg(0) === 'friends') && is_numeric(arg(1)) && $account->uid == arg(1) && user_access($perm, $account)) {
    return TRUE;
  }

  return FALSE;
}
